package ru.demo.wms.view;

import java.awt.Color;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.view.document.AbstractPdfView;

import com.lowagie.text.*;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import ru.demo.wms.model.ShipmentType;

/**
 * Класс ShipmentTypePdfView создает PDF-документ, содержащий таблицу
 * с информацией о типах отправлений (ShipmentType).
 * Используется в качестве Spring View для экспорта отчетов.
 */
public class ShipmentTypePdfView extends AbstractPdfView {

	/**
	 * Устанавливает метаданные PDF-файла: заголовок и нижний колонтитул.
	 */
	@Override
	protected void buildPdfMetadata(Map<String, Object> model, Document document, HttpServletRequest request) {
		HeaderFooter header = new HeaderFooter(new Phrase("SHIPMENTTYPE PDF VIEW"), false);
		header.setAlignment(Element.ALIGN_CENTER);
		document.setHeader(header);

		HeaderFooter footer = new HeaderFooter(new Phrase("GENERATED BY NIT - Page#"), null);
		footer.setAlignment(Element.ALIGN_RIGHT);
		document.setFooter(footer);
	}

	/**
	 * Формирует тело PDF-документа: изображение, заголовок, таблица с данными.
	 */
	@Override
	protected void buildPdfDocument(
			Map<String, Object> model,
			Document document,
			PdfWriter writer,
			HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		// Установка имени скачиваемого файла
		response.addHeader("Content-Disposition", "attachment;filename=ShipmentType.pdf");

		// Вставка логотипа
		Image img = Image.getInstance("https://www.pochta.ru/static/images/logo-light.3c5f75f9dc91.svg");
		img.scaleAbsolute(250, 40);
		img.setAlignment(Element.ALIGN_CENTER);
		document.add(img);

		// Добавление заголовка
		Font titleFont = new Font(Font.TIMES_ROMAN, 22, Font.BOLD, Color.BLUE);
		Paragraph title = new Paragraph("SHIPMENT TYPE PDF DATA", titleFont);
		title.setAlignment(Element.ALIGN_CENTER);
		title.setSpacingAfter(10f);
		document.add(title);

		// Извлечение списка типов отправлений из модели
		@SuppressWarnings("unchecked")
		List<ShipmentType> list = (List<ShipmentType>) model.get("list");

		// Настройка шрифта для заголовков таблицы
		Font tableFont = new Font(Font.TIMES_ROMAN, 12, Font.BOLD, new Color(51, 153, 102));

		// Создание таблицы с 6 колонками
		PdfPTable table = new PdfPTable(6);
		table.setWidthPercentage(100);

		// Заголовки таблицы
		table.addCell(new Phrase("ID", tableFont));
		table.addCell(new Phrase("MODE", tableFont));
		table.addCell(new Phrase("CODE", tableFont));
		table.addCell(new Phrase("ENABLE", tableFont));
		table.addCell(new Phrase("GRADE", tableFont));
		table.addCell(new Phrase("NOTE", tableFont));

		// Заполнение таблицы строками с данными
		for (ShipmentType st : list) {
			table.addCell(String.valueOf(st.getId()));
			table.addCell(st.getShipMode());
			table.addCell(st.getShipCode());
			table.addCell(st.getEnbleShip());
			table.addCell(st.getShipGrade());
			table.addCell(st.getShipDesc());
		}

		// Добавление таблицы в документ
		document.add(table);
	}
}
