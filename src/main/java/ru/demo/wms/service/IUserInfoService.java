package ru.demo.wms.service;

import java.util.List;
import java.util.Optional;

import ru.demo.wms.consts.UserMode;
import ru.demo.wms.model.UserInfo;

public interface IUserInfoService {

	Integer saveUserInfo(UserInfo ui);
	List<UserInfo> getAllUserInfos();
	Optional<UserInfo> getOneUserInfoByEmail(String email);
	void updateUserStatus(Integer id,UserMode mode);
	void updateUserPassword(String email,String password);
	
	boolean isUserEmail(String email);
}
/*
Интерфейс IUserInfoService предназначен для управления информацией о пользователях в приложении, предлагая функциональность для создания, обновления и получения пользовательских данных. Это включает в себя управление статусом пользователя, изменение пароля и проверку существования электронной почты пользователя в системе. Вот подробный обзор методов, предоставляемых интерфейсом:

Методы интерфейса IUserInfoService:
saveUserInfo(UserInfo ui):
Сохраняет новую информацию о пользователе в системе или обновляет существующую. Возвращает идентификатор сохраненного пользователя.

getAllUserInfos():
Возвращает список всех пользователей, зарегистрированных в системе. Это может быть полезно для административных функций, таких как просмотр списка пользователей.

getOneUserInfoByEmail(String email):
Возвращает информацию о пользователе по его электронной почте. Использование Optional указывает на то, что пользователь с такой электронной почтой может отсутствовать в системе.

updateUserStatus(Integer id, UserMode mode):
Обновляет статус пользователя (например, активирован или деактивирован) на основе предоставленного идентификатора и статуса. Это может быть использовано для управления доступом пользователя к приложению.

updateUserPassword(String email, String password):
Обновляет пароль пользователя, используя его электронную почту как идентификатор. Этот метод предполагает, что пароль будет должным образом зашифрован перед сохранением в базе данных.

isUserEmail(String email):
Проверяет, существует ли пользователь с указанной электронной почтой в системе. Возвращает true, если пользователь существует, и false в противном случае.

Рекомендации для реализации:
Безопасность данных: Особое внимание следует уделить безопасности хранения и обработки пользовательских данных, особенно паролей. Рекомендуется использовать надежные методы хеширования паролей, такие как BCrypt.

Валидация входных данных: Перед сохранением или обновлением информации о пользователях необходимо проводить тщательную валидацию входных данных, чтобы предотвратить сохранение некорректной информации.

Обработка исключений: При разработке сервиса важно предусмотреть обработку возможных исключений, таких как попытка обновления данных несуществующего пользователя.

Управление доступом: Внедрение контроля доступа на уровне сервиса может быть полезным для ограничения выполнения некоторых операций только для авторизованных пользователей или администраторов.

Реализация IUserInfoService обеспечивает основу для управления аккаунтами пользователей в приложении, предоставляя необходимые инструменты для регистрации, аутентификации и авторизации пользователей, а также для выполнения административных задач, связанных с управлением пользователями.
*/