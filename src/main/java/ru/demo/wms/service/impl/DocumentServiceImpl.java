package ru.demo.wms.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ru.demo.wms.model.Document;
import ru.demo.wms.repo.DocumentRepository;
import ru.demo.wms.service.IDocumentService;

@Service
public class DocumentServiceImpl implements IDocumentService {

	@Autowired
	private DocumentRepository repo;
	
	public void saveDocument(Document doc) {
		repo.save(doc);
	}

	public List<Object[]> getDocumentIdAndName() {
		return repo.getDocumentIdAndName();
	}
	
	public void deleteDocumentById(Long id) {
		if(repo.existsById(id))
			repo.deleteById(id);
		else 
			throw new RuntimeException("Document Not exist");
	}
	
	public Document getDocumentById(Long id) {
		return repo.findById(id).orElseThrow(
				()->new RuntimeException("Document Not exist")
				);
	}

}
/*
Класс DocumentServiceImpl реализует бизнес-логику для работы с документами в приложении, обеспечивая базовые операции, такие как сохранение, удаление и получение информации о документах. Давайте разберем ключевые аспекты этой реализации:

Внедрение зависимостей:
DocumentRepository: Используется для взаимодействия с базой данных. Аннотация @Autowired обеспечивает автоматическое внедрение экземпляра DocumentRepository в DocumentServiceImpl, позволяя сервису использовать репозиторий для выполнения операций с базой данных.
Методы сервиса:
saveDocument: Сохраняет документ в базе данных. Принимает объект Document и использует метод save репозитория для его сохранения или обновления.

getDocumentIdAndName: Возвращает список идентификаторов и названий документов. Этот метод может использоваться, например, для отображения списка документов без загрузки всей информации о каждом документе.

deleteDocumentById: Удаляет документ по его идентификатору. Сначала проверяет существование документа в базе данных с помощью existsById; если документ существует, он удаляется методом deleteById. В противном случае генерируется исключение, сообщающее об отсутствии документа.

getDocumentById: Возвращает документ по его идентификатору. Использует метод findById репозитория, который возвращает Optional<Document>. Если документ существует, возвращается его экземпляр; в противном случае генерируется исключение.

Потенциальные улучшения:
Обработка исключений: Вместо генерации RuntimeException при отсутствии документа рекомендуется создать и использовать специализированные исключения, например, DocumentNotFoundException. Это улучшит читаемость кода и облегчит обработку ошибок на уровне контроллеров или глобальных обработчиков исключений.

Типобезопасность для идентификаторов: Если в вашей модели Document идентификатор определен как Long, стоит использовать этот тип во всех соответствующих методах сервиса и репозитория для избежания путаницы и повышения читаемости кода.

Логирование: Добавление логирования операций может помочь в отладке и мониторинге выполнения операций, особенно при обработке исключений и выполнении ключевых бизнес-операций.

Общие рекомендации:
Код ответа и сообщения об ошибках: Для API или пользовательского интерфейса может быть полезно предусмотреть возвращение не только текста ошибки, но и специфического кода ошибки, что упростит обработку ошибок на клиенте.

Документация и комментарии: Комментирование публичных методов сервиса поможет другим разработчикам быстрее понять назначение и способы использования методов сервиса.

DocumentServiceImpl является важным компонентом для управления документами в приложении, и его дальнейшее развитие и рефакторинг могут существенно повысить качество кода и удобство работы с системой.
*/