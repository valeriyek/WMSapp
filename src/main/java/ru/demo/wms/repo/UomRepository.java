package ru.demo.wms.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import ru.demo.wms.model.Uom;

public interface UomRepository extends JpaRepository<Uom, Integer>
{


	@Query("SELECT count(uomModel) FROM Uom WHERE uomModel=:uomModel")
	Integer getUomModelCount(String uomModel);
	

	@Query("SELECT count(uomModel) FROM Uom WHERE uomModel=:uomModel and id!=:id")
	Integer getUomModelCountForEdit(String uomModel,Integer id);
	

	@Query("SELECT id,uomModel FROM Uom")
	List<Object[]> getUomIdAndModel();

	

}
/*Этот интерфейс UomRepository служит репозиторием Spring Data JPA для сущности Uom, что представляет собой единицу измерения в системе управления логистикой. Репозиторий предлагает не только стандартные операции CRUD, предоставляемые его расширением JpaRepository, но и специализированные методы для выполнения конкретных задач, связанных с управлением единицами измерения.

Специализированные методы:
getUomModelCount: Проверяет количество единиц измерения (Uom) с заданной моделью (uomModel). Этот метод используется для проверки уникальности модели единицы измерения при ее создании, помогая предотвратить дублирование в системе.

getUomModelCountForEdit: Аналогичен методу getUomModelCount, но исключает из проверки единицу измерения с определенным идентификатором (id). Это позволяет редактировать существующую единицу измерения, не нарушая уникальности модели.

getUomIdAndModel: Возвращает список идентификаторов и моделей всех единиц измерения. Этот метод может использоваться для интеграции данных единиц измерения в другие части системы, например, при формировании выпадающих списков в пользовательском интерфейсе.

Ключевые особенности и преимущества:
Автоматизация операций с данными: Наследование от JpaRepository обеспечивает автоматическую реализацию методов для выполнения базовых операций с данными, что сокращает необходимость в ручной реализации и упрощает разработку.

Гибкость запросов: Использование аннотации @Query для определения пользовательских запросов на JPQL (Java Persistence Query Language) дает возможность точно управлять выборкой данных, обеспечивая необходимую гибкость для выполнения специализированных задач.

Поддержка проверки уникальности: Методы getUomModelCount и getUomModelCountForEdit предоставляют простой и эффективный способ проверки уникальности модели единицы измерения, что является важной задачей при управлении данными в системе.

Удобство интеграции: Метод getUomIdAndModel упрощает процесс интеграции единиц измерения с другими компонентами системы, предоставляя необходимые данные для создания пользовательских интерфейсов и других функций.

UomRepository является ключевым инструментом для управления единицами измерения в системе управления логистикой, предлагая разработчикам удобные и мощные средства для работы с данными и обеспечивая поддержку сложных бизнес-процессов.*/