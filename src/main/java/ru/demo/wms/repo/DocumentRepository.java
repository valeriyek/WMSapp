package ru.demo.wms.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import ru.demo.wms.model.Document;

public interface DocumentRepository 
	extends JpaRepository<Document, Long> 
{

	@Query("SELECT docId,docName FROM Document")
	List<Object[]> getDocumentIdAndName();

}
/*

Этот интерфейс, DocumentRepository, представляет собой репозиторий Spring Data JPA для сущности Document. Он используется для абстракции и инкапсуляции всех механизмов доступа к данным для сущности Document. Репозиторий расширяет интерфейс JpaRepository<Document, Long>, что предоставляет ряд стандартных методов для выполнения операций с базой данных, таких как сохранение, удаление и поиск сущностей, а также дополнительные возможности, такие как пагинация и сортировка.

Ключевые аспекты:
Расширение JpaRepository: Путем расширения JpaRepository, интерфейс DocumentRepository автоматически наследует ряд методов для работы с сущностью Document, включая стандартные CRUD операции. Параметры <Document, Long> указывают, что репозиторий работает с сущностями типа Document, и что тип идентификатора сущности — Long.

Аннотация @Query: Метод getDocumentIdAndName() аннотирован с @Query, что позволяет определить пользовательский запрос JPQL (Java Persistence Query Language) для выполнения специфических операций, не поддерживаемых стандартными методами репозитория. Здесь запрос "SELECT docId,docName FROM Document" предназначен для извлечения идентификаторов и имен документов. Возвращаемый тип List<Object[]> говорит о том, что каждый элемент списка будет массивом объектов, где каждый массив содержит идентификатор и имя одного документа.

Применение:
Использование пользовательского запроса с @Query позволяет создавать запросы, точно соответствующие требованиям бизнеса, что особенно полезно в ситуациях, когда стандартные методы репозитория не обеспечивают необходимого уровня гибкости. Такой подход упрощает реализацию сложных запросов к базе данных, оставаясь при этом в рамках проверенной архитектуры Spring Data JPA.

Преимущества:
Сокращение объема шаблонного кода: Наследуя JpaRepository, разработчики избавляются от необходимости реализовывать многие стандартные методы доступа к данным, что упрощает разработку и поддержку.
Интеграция с Spring Framework: Spring Data JPA тесно интегрирован с Spring Framework, что обеспечивает единую конфигурацию и управление транзакциями.
Гибкость: Пользовательские запросы с помощью @Query предоставляют мощный инструмент для реализации специализированных операций с данными, сохраняя при этом чистоту и простоту кода.
*/