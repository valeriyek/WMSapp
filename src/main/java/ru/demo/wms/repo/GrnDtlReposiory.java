package ru.demo.wms.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;

import ru.demo.wms.model.GrnDtl;

public interface GrnDtlReposiory extends JpaRepository<GrnDtl, Integer> {

	@Modifying
	@Query("UPDATE GrnDtl SET status=:status WHERE id=:id")
	void updateGrnDtlStatus(Integer id,String status);
}
/*

Этот интерфейс GrnDtlRepository представляет собой репозиторий Spring Data JPA для сущности GrnDtl. Он служит для абстракции и инкапсуляции всех механизмов доступа к данным для этой сущности. Репозиторий наследует интерфейс JpaRepository<GrnDtl, Integer>, что автоматически предоставляет ряд стандартных методов для выполнения операций с базой данных, таких как сохранение, удаление, поиск сущностей, а также добавляет дополнительные возможности, например, пагинацию и сортировку.

Основные характеристики:
Расширение JpaRepository: Расширяя JpaRepository, GrnDtlRepository автоматически включает в себя базовый набор методов для управления сущностями GrnDtl, где GrnDtl является типом сущности, а Integer — типом её идентификатора.

Аннотация @Modifying: Эта аннотация используется для уточнения, что метод updateGrnDtlStatus модифицирует данные в базе данных. Это необходимо, поскольку по умолчанию Spring Data JPA предполагает, что методы запросов только извлекают данные и не вносят изменений.

Аннотация @Query: Позволяет определить пользовательский запрос JPQL (Java Persistence Query Language) непосредственно в аннотации. В данном случае запрос "UPDATE GrnDtl SET status=:status WHERE id=:id" предназначен для обновления статуса сущности GrnDtl с определенным идентификатором id на новое значение status. Параметры запроса (:id и :status) будут заменены на значения, переданные в метод updateGrnDtlStatus при его вызове.

Применение:
Метод updateGrnDtlStatus предоставляет способ обновления статуса сущности GrnDtl в базе данных, что является обычной задачей в бизнес-процессах, связанных с управлением товарными накладными или логистическими операциями. Использование аннотации @Modifying в сочетании с @Query позволяет выполнить это обновление напрямую через репозиторий, минуя необходимость в ручном управлении состоянием сущности и явном вызове метода сохранения.

Преимущества:
Уменьшение количества шаблонного кода: Наследуя JpaRepository, разработчики избегают необходимости реализации базовых методов доступа к данным, что упрощает разработку.
Простота выполнения модифицирующих операций: Методы, аннотированные @Modifying и @Query, облегчают выполнение операций обновления, не требуя от разработчика выполнения дополнительных действий для управления контекстом персистентности или транзакциями.
Гибкость и выразительность JPQL: JPQL позволяет формулировать запросы, тесно связанные с моделью данных приложения, используя классы и их атрибуты вместо прямого SQL, что упрощает поддержку и развитие приложения.
*/