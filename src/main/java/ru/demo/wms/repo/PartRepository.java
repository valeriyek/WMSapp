package ru.demo.wms.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import ru.demo.wms.model.Part;

public interface PartRepository extends JpaRepository<Part, Integer> {

	@Query("SELECT id, partCode FROM Part")
	public List<Object[]> getPartIdAndCode();
}
/*
Этот интерфейс PartRepository является репозиторием Spring Data JPA для сущности Part и расширяет JpaRepository, предоставляя базовый набор операций CRUD (создание, чтение, обновление, удаление) для работы с данными. Особенность этого репозитория заключается в добавлении специфического метода getPartIdAndCode с использованием аннотации @Query, что позволяет выполнять пользовательский запрос к базе данных.

Особенности:
Метод getPartIdAndCode: Этот метод определен для извлечения идентификатора (id) и кода части (partCode) для каждого объекта Part. Возвращаемый тип List<Object[]> указывает, что каждый объект в списке будет массивом, содержащим два элемента: id и partCode. Это может быть полезно для операций, требующих отображения или использования только идентификатора и кода частей, например, в пользовательских интерфейсах или для интеграционных целей.
Ключевые характеристики:
Использование JPQL: @Query("SELECT id, partCode FROM Part") демонстрирует использование JPQL (Java Persistence Query Language) для определения запроса, который не привязан напрямую к структуре базы данных, а вместо этого работает с объектной моделью приложения.

Аннотация @Query: Позволяет определить запрос напрямую в аннотации, предоставляя гибкость для создания пользовательских запросов вне стандартных методов, предоставляемых Spring Data JPA.

Преимущества:
Гибкость: Создание пользовательских запросов с помощью аннотации @Query предоставляет разработчикам возможность точно определять запросы, которые могут быть необходимы для конкретных бизнес-задач, не ограничиваясь только стандартными методами доступа к данным.

Простота интеграции: Метод getPartIdAndCode упрощает процесс извлечения специфических данных о частях, что может быть полезно при интеграции с другими системами или компонентами, требующими ограниченного набора данных.

Улучшенное разделение и организация кода: Определение специфических запросов внутри репозитория помогает поддерживать код чистым и организованным, сосредотачиваясь на доступе к данным в одном месте, что облегчает его поддержку и развитие.

В целом, PartRepository с его методом getPartIdAndCode является примером эффективного использования Spring Data JPA для создания гибких и мощных решений доступа к данным, ориентированных на специфические потребности приложения.







*/