package ru.demo.wms.util;

import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.stream.Collectors;
import org.springframework.stereotype.Component;


@Component
public class MyAppUtil {

    public Map<Integer, String> convertListToMap(                                            
            List<Object[]> list) {
        return list.stream()
                .collect(
                        Collectors.toMap(
                                ob -> (Integer) ob[0], ob -> (String) ob[1])
                );

    }

    public String genPwd() {
        return UUID.randomUUID()
                .toString()
                .replaceAll("-", "")
                .substring(0, 8);
    }

    public String genOtp() {
        return String.format("%06d",
                new Random().nextInt(999999));
    }
}
/*
Класс MyAppUtil представляет собой интерфейс с набором статических утилитных методов, предназначенных для выполнения общих задач в приложении, таких как преобразование списка в карту (Map), генерация пароля и одноразового пароля (OTP). Эти методы предоставляют общие сервисные функции, которые могут быть использованы в разных частях приложения. Давайте рассмотрим каждый метод подробнее:

Методы интерфейса MyAppUtil:
convertListToMap(List<Object[]> list):
Принимает список объектных массивов (List<Object[]>), где каждый массив содержит два элемента — ключ и значение. Возвращает карту (Map), созданную на основе этих массивов, где первый элемент массива становится ключом (Integer), а второй — значением (String) в карте. Этот метод может быть особенно полезен для обработки результатов запросов к базе данных, где необходимо легко преобразовать выборку в карту для дальнейшего использования в приложении.

genPwd():
Генерирует случайный пароль, используя UUID.randomUUID(). Сгенерированный UUID преобразуется в строку, из которой удаляются все дефисы, и затем из неё берется подстрока первых 8 символов. Этот метод может использоваться для создания начальных паролей для пользователей при их регистрации в системе.

genOtp():
Генерирует одноразовый пароль (OTP), состоящий из 6 цифр. Использует Random().nextInt(999999) для получения случайного числа, которое затем форматируется в строку с ведущими нулями до общей длины в 6 символов. Этот метод полезен для систем, требующих дополнительной аутентификации или подтверждения действий через OTP.

Применение:
Эти утилитные методы обеспечивают важную инфраструктурную поддержку для приложения, упрощая рутинные задачи, связанные с обработкой данных и безопасностью. Их применение может значительно сократить количество повторяющегося кода и улучшить общую архитектуру приложения.

Рекомендации:
При использовании метода genPwd() важно учитывать, что генерируемые пароли не предназначены для использования в качестве постоянных или особенно чувствительных паролей из-за их ограниченной длины и потенциальной предсказуемости.
Метод genOtp() полезен для создания кодов подтверждения, но следует обеспечить их короткое время жизни и одноразовое использование для поддержания безопасности.
Использование convertListToMap() требует осторожности в случаях, когда возможно существование дубликатов ключей в исходном списке, так как это может привести к потере данных при преобразовании в карту.
 */
