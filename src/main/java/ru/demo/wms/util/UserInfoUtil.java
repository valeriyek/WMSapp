package ru.demo.wms.util;

import java.util.Set;
import java.util.stream.Collectors;

import ru.demo.wms.model.Role;

public interface UserInfoUtil {

	public static Set<String> getRolesAsString(Set<Role> roles) {
		return roles
				.stream()
				//Role(C) -> RoleType(E).name() -->String
				.map(role->role.getRole().name())
				.collect(Collectors.toSet());
	}
}
/*
Интерфейс UserInfoUtil представляет собой простую утилиту для преобразования набора (Set) объектов Role в набор строк (Set<String>), где каждая строка представляет имя роли. Это полезно в контекстах, где необходимо представить роли пользователя в удобочитаемом или сериализуемом формате, например, при формировании ответов в REST API или при работе с фронтендом. Вот детальное описание метода, представленного в этом интерфейсе:

Метод getRolesAsString(Set<Role> roles):
Параметры:

roles: Набор (Set) объектов Role, который представляет роли пользователя.
Возвращаемое значение:

Возвращает Set<String>, где каждая строка является именем одной из ролей пользователя.
Процесс:

Используя потоки (streams) Java, этот метод преобразует каждый объект Role в его строковое представление, используя метод name() перечисления RoleType, которое ассоциировано с каждым объектом Role.
Затем результаты собираются в Set<String>, который и возвращается вызывающему коду.
Пример использования:
Этот метод может быть особенно полезен в сервисах или контроллерах, где необходимо передать список ролей пользователя во фронтенд в удобном для восприятия формате, или при записи информации о пользователе в журнал для отладочных или аудиторских целей.

Рекомендации:
Расширяемость: При изменении структуры или типов ролей в приложении следует обновить этот метод, чтобы он корректно отражал новую структуру.

Безопасность: При передаче данных о ролях пользователя между сервером и клиентом убедитесь, что это не влияет на безопасность приложения, например, не раскрывает конфиденциальную информацию или не позволяет осуществлять неавторизованные действия.

Интеграция с фронтендом: При использовании этого метода для формирования ответов API, которые будут использоваться фронтендом, рекомендуется также предусмотреть соответствующие механизмы на стороне клиента для обработки полученных данных о ролях.

UserInfoUtil демонстрирует простой, но мощный способ использования Java Streams для преобразования и агрегации данных в приложениях, улучшая читаемость и упрощая работу с данными о ролях пользователя.
*/