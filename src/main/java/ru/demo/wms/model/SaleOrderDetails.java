package ru.demo.wms.model;
/*
Класс SaleOrderDetails представляет собой модель детализации заказа на продажу в системе управления складом. Эта модель используется для описания конкретных позиций в заказе на продажу, включая количество заказанных единиц каждого товара и связь с конкретным товаром (Part) и заказом на продажу (SaleOrder).

Основные атрибуты:

id: Уникальный идентификатор детали заказа, генерируемый автоматически.
qty: Количество единиц товара в данной позиции заказа.
part: Связь с товаром (Part), указывающая на конкретный товар в детали заказа.
saleOrder: Связь с заказом на продажу (SaleOrder), указывающая, к какому заказу принадлежит данная деталь заказа.
Конструкторы:

Конструктор без параметров для использования в JPA.
Конструктор со всеми полями для удобства инициализации объектов.
Методы доступа:

Геттеры и сеттеры для всех атрибутов класса.
Модель SaleOrderDetails позволяет разбивать заказы на продажу на отдельные позиции, 
каждая из которых содержит информацию о количестве 
и типе заказанного товара. Это обеспечивает гибкость управления заказами, 
позволяя вносить изменения в количество товаров, удалять или добавлять новые позиции в существующие заказы. 
Интеграция с классом Part позволяет связать каждую деталь заказа с конкретным товаром из каталога,
а связь с классом SaleOrder обеспечивает привязку к конкретному заказу на продажу, 
что важно для отслеживания выполнения заказов и управления запасами на складе.

Использование в приложении:

В контексте системы управления складом, класс SaleOrderDetails играет ключевую роль в процессах продажи товаров. Он позволяет управлять деталями заказа на продажу, включая добавление новых товаров в заказ, изменение количества товаров в существующих позициях и удаление товаров из заказа. Это обеспечивает гибкость в управлении заказами и позволяет складу эффективно реагировать на изменения в спросе клиентов и наличии товаров на складе.

Взаимодействие с другими компонентами системы:

С Part: Эта связь позволяет каждой детали заказа быть непосредственно связанной с конкретным товаром из каталога, облегчая учет и контроль за наличием товаров, необходимых для выполнения заказа.
С SaleOrder: Связь с заказом на продажу позволяет отслеживать все детали, связанные с конкретным заказом, и управлять ими в рамках одного бизнес-процесса. Это включает в себя изменение статуса заказа (например, открыт, готов к отправке, отгружен) и обеспечение своевременного выполнения заказов.
Примеры использования:

Добавление товара в заказ на продажу: При создании или редактировании заказа на продажу можно добавить новую деталь заказа, указав товар и количество. Это автоматически обновит общую стоимость заказа и информацию о наличии товара на складе.

Изменение количества товара: Если клиент решает изменить количество товара в уже существующем заказе, можно обновить информацию в соответствующей детали заказа без необходимости создания нового заказа.

Удаление товара из заказа: Если товар более не требуется в заказе, соответствующая деталь заказа может быть удалена, что автоматически скорректирует общую стоимость заказа и информацию о запасах на складе.

Таким образом, SaleOrderDetails является важной частью системы управления складом, обеспечивая гибкое и эффективное управление заказами на продажу и взаимодействие с инвентарем.

*/
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import lombok.Data;

@Entity
@Table(name = "sale_order_details")
public class SaleOrderDetails {

	@Id
	@GeneratedValue(generator = "sale_order_dtl_gen")
	@SequenceGenerator(name = "sale_order_dtl_gen", sequenceName = "sale_order_dtl_seq")
	@Column(name = "sale_ordr_dtl_id")
	private Integer id;

	@Column(name = "sale_order_dtl_qty")
	private Integer qty;

	@ManyToOne
	@JoinColumn(name = "part_id_fk")
	private Part part;

	@ManyToOne
	@JoinColumn(name = "sale_order_id_fk")
	private SaleOrder saleOrder;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getQty() {
		return qty;
	}

	public void setQty(Integer qty) {
		this.qty = qty;
	}

	public Part getPart() {
		return part;
	}

	public void setPart(Part part) {
		this.part = part;
	}

	public SaleOrder getSaleOrder() {
		return saleOrder;
	}

	public void setSaleOrder(SaleOrder saleOrder) {
		this.saleOrder = saleOrder;
	}

	public SaleOrderDetails(Integer id, Integer qty, Part part, SaleOrder saleOrder) {
		super();
		this.id = id;
		this.qty = qty;
		this.part = part;
		this.saleOrder = saleOrder;
	}

	public SaleOrderDetails() {
		super();
		// TODO
	}
	
	

}
